Module TestArrays
    'Attribute VB_Name = "TestArrays"
    Option Explicit
    'Option Public Module
    ''@IgnoreModule
    '@TestModule
    '@Folder("Tests")

    ' Public Assert As Object
    ' Public Fakes As Object

    ' '@ModuleInitialize
    ' Public Sub ModuleInitialize()
    '     'this method runs once per module.
    '     Set Assert = CreateObject("Rubberduck.AssertClass")
    '     Set Fakes = CreateObject("Rubberduck.FakesProvider")
    ' End Sub

    ' '@ModuleCleanup
    ' Public Sub ModuleCleanup()
    '     'this method runs once per module.
    '     Set Assert = Nothing
    '     Set Fakes = Nothing
    ' End Sub

    ' '@TestInitialize
    ' Public Sub TestInitialize()
    '     'This method runs before every test in the module..
    ' End Sub

    ' '@TestCleanup
    ' Public Sub TestCleanup()
    '     'this method runs after every test in the module.
    ' End Sub

        '@TestModule
        '@Folder("Tests")
        Public Sub ArraysTests()

            ' Test33_pvParseParamArrayToLystIsOkay_ArrayOf5Primitive

            Test01_RanksEmptyArrayIsZero
            Test02_ListArrayHasOneDimension
            Test03_TableArrayHasTwoDImensions
            Test04_MDArrayHasMoreThanTwoDimensions
            Test05_HaRankEmptyArrayFalse
            Test06_HaRank1DArrayFalse
            Test07_HaRank3DArrayTrue
            Test08_HaRank3DArrayNegativeBoundsTrue
            Test09_HaRank3DArraySingleItemNegativeBoundsTrue
            Test10_IsListArrayOnEmptyArraIsFalse
            Test11_IsListArrayForDefinedArrayIsTrue
            Test12_IsListArrayForTableArrayIsFalse
            Test13_IsTableArrayOnEmptyArrayIsFalse
            Test14_IsTableArrayOnListArrayIsFalse
            Test15_IsTableArrayOnTableArrayIsTrue
            Test16_IsMDArrayOnEmptyArrayIsFalse
            Test17_IsMDArayOnListArrayIsFalse
            Test18_IsMDArrayOnTableArrayIsFalse
            Test19_IsMDArrayOnMDArrayIsTrue
            Test20_CountOnEmptyArrayIsMinusOne
            Test21_TableArrayRankTwoHasCountOfTen
            Test22_TryExtentOnEmptyArrayHasStatusOfFalse
            Test23_TryExtentOnFilledMDArrayRankTwoHasFiveTenSix
            'Test24_TryGetUBoundEmptyArray
            ' Test25_TryGetUBoundUboundIs10
            Test26_TransposeArray
            Test27_ArrayToLystOfLystsByRow
            Test28_ArrayToLystOfLystsByCol
            Test29_ArrayToLystOfLystsByRowFirstItemActionIsSplitFirstRow
            Test30_ArrayToLystOfLystsByColFirstItemActionIsSplitFirstItem
            Test31_ArrayToLystOfLystsByRowFirstItemActionIsCopyFirstItem
            Test32_ArrayToLystOfLystsByColFirstActionItemIsSPlitFirstItem

            Debug.Print "Testing completed for", CurrentComponentName

        End Sub
            
            '@IgnoreModule UnassignedVariableUsage

        Public Function MakeRowColArray(ByVal ipRows As Long, ByVal ipCols As Long) As Variant
        
            '@Ignore VariableNotAssigned
            Dim myArray As Variant
            ReDim myArray(1 To ipRows, 1 To ipCols)
            Dim myValue As Long
            myValue = 1
            
            Dim myRow As Long
            For myRow = 1 To ipRows
            
                Dim myCol As Long
                For myCol = 1 To ipCols
                
                    myArray(myRow, myCol) = myValue
                    myValue = myValue + 1
                    
                Next
                
            Next
                
            MakeRowColArray = myArray
            
        End Function


        Public Function MakeColRowArray(ByVal ipRows As Long, ByVal ipCols As Long) As Variant
        
            '@Ignore VariableNotAssigned
            Dim myArray As Variant
            ReDim myArray(1 To ipRows, 1 To ipCols)
            Dim myValue As Long
            myValue = 1
            
            Dim myCol As Long
            For myCol = 1 To ipCols
            
                Dim myRow As Long
                For myRow = 1 To ipRows
                
                    myArray(myRow, myCol) = myValue
                    myValue = myValue + 1
                    
                Next
                
            Next
                
            MakeColRowArray = myArray
            
        End Function
        
        Public Function GetParamArray(ParamArray ipArgs() As Variant) As Variant
            GetParamArray = ipArgs
        End Function

        ' '@TestMethod("Ranks")
        ' Public Sub Test33_pvParseParamArrayToLystIsOkay_ArrayOf5Primitive()
        '     On Error GoTo TestFail
            
        '     'Arrange:
        '     Dim myExpected  As Variant
        '     myExpected = Array(1, 2, 3, 4, 5)
        
            
        '     Dim myExpectedCode As ParseResultCode
        '     myExpectedCode = ParseResultCode.IsSingleLyst
            
        '     Dim myResult As ParseResult
        '    ' Dim myResultState As Boolean
            
        '     'Act:
        '     Set myResult = Arrays.ParseVariantUsingSingleItemSpecialCase(GetParamArray(1, 2, 3, 4, 5))
        
        '     'Assert:
        '     Assert.Strict.AreEqual myExpectedCode, myResult.Code  , CurrentProcedureName
        '     Assert.Strict.SequenceEquals myExpected, myResult.Items.ToArray  , CurrentProcedureName
        ' TestExit:
        '     Exit Sub
            
        ' TestFail:
        '     Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
        '     Resume TestExit
            
        ' End Sub

    '@TestMethod("Ranks")
        Public Sub Test01_RanksEmptyArrayIsZero()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Long
            myExpected = 0
            
            Dim myArray() As Long
            Dim myResult As Long
            
            'Act:
            myResult = Arrays.Ranks(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test01_RanksEmptyArrayIsZero raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("Ranks")
        Public Sub Test02_ListArrayHasOneDimension()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Long
            myExpected = 1
            
            Dim myArray(1 To 10) As Long
            Dim myResult As Long
            
            'Act:
            myResult = Arrays.Ranks(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test02_Ranks1DArrayIs1 raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("Ranks")
        Public Sub Test03_TableArrayHasTwoDImensions()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Long
            myExpected = 2
            
            Dim myArray(1 To 10, 1 To 10) As Long
            Dim myResult As Long
            
            'Act:
            myResult = Arrays.Ranks(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("Ranks")
        Public Sub Test04_MDArrayHasMoreThanTwoDimensions()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Long
            myExpected = 3
            
            Dim myArray(1 To 10, 1 To 10, 1 To 10) As Long
            Dim myResult As Long
            
            'Act:
            myResult = Arrays.Ranks(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("HasRank")
        Public Sub Test05_HaRankEmptyArrayFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray() As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.HasRank(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("HasRank")
        Public Sub Test06_HaRank1DArrayFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray(1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.HasRank(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("HasRank")
        Public Sub Test07_HaRank3DArrayTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(1 To 10, 1 To 10, 1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.HasRank(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("HasRank")
        Public Sub Test08_HaRank3DArrayNegativeBoundsTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(-10 To -1, -10 To -1, -10 To -1) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.HasRank(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("HasRank")
        Public Sub Test09_HaRank3DArraySingleItemNegativeBoundsTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(-1 To -1, -1 To -1, -1 To -1) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.HasRank(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("IsId")
        Public Sub Test10_IsListArrayOnEmptyArraIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray() As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsListArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("IsId")
        Public Sub Test11_IsListArrayForDefinedArrayIsTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsListArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("Is2d")
        Public Sub Test12_IsListArrayForTableArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray(1 To 10, 1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsListArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("Is2d")
        Public Sub Test13_IsTableArrayOnEmptyArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray() As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsTableArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("Is2d")
        Public Sub Test14_IsTableArrayOnListArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray(1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsTableArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("Is2d")
        Public Sub Test15_IsTableArrayOnTableArrayIsTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(1 To 10, 1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsTableArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("IsMd")
        Public Sub Test16_IsMDArrayOnEmptyArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray() As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsMDArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("IsMd")
        Public Sub Test17_IsMDArayOnListArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray(1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsMDArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("IsMd")
        Public Sub Test18_IsMDArrayOnTableArrayIsFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = False
            
            Dim myArray(1 To 10, 1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsMDArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("IsMd")
        Public Sub Test19_IsMDArrayOnMDArrayIsTrue()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected  As Boolean
            myExpected = True
            
            Dim myArray(1 To 10, 1 To 10, 1 To 10) As Long
            Dim myResult As Boolean
            
            'Act:
            myResult = Arrays.IsMDArray(myArray)
        
            'Assert:
            Assert.Strict.AreEqual myExpected, myResult, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("TryGetSize")
        Public Sub Test20_CountOnEmptyArrayIsMinusOne()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpected As Long
            myExpected = -1
            
            Dim myArray() As Long
            Dim myResult As Long
            
            'Act:
            myResult = Arrays.Count(myArray)
            
            'Assert:
        ' Assert.Strict.AreEqual myExpectedStatus, myResultStatus, "Status"
            Assert.Strict.AreEqual myExpected, myResult, "Value"
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("TryGetSize")
        Public Sub Test21_TableArrayRankTwoHasCountOfTen()
            On Error GoTo TestFail
            
            'Arrange:
            
            
            Dim myExpectedCount As Long
            myExpectedCount = 10
            
            Dim myArray(1 To 10, 1 To 10, 1 To 10) As Long
            Dim myResultCount As Long
            
        
            Dim myResultValue As Long
            
            'Act:
            myResultCount = Arrays.Count(myArray, 2)
        
            'Assert:
            Assert.Strict.AreEqual myExpectedCount, myResultCount, CurrentProcedureName
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("TryGetLBound")
        Public Sub Test22_TryExtentOnEmptyArrayHasStatusOfFalse()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus  As Boolean
            myExpectedStatus = False
            
            Dim myExpectedValue As Long
            myExpectedValue = -1
            
            Dim myArray() As Long
            'Dim myResult As Boolean
            Dim myResult As Result
        
            
            Dim myResultState As Boolean
            
            
            'Act:
            myResultState = Arrays.TryExtent(myArray, myResult, 1)
            
            'Assert:
            Assert.Strict.AreEqual myExpectedStatus, myResultState, "Status"
            'Assert.Strict.AreEqual myExpectedValue, myResult.item(TryLboundResult), "Value"
            
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub


    '@TestMethod("TryGetLBound")
        Public Sub Test23_TryExtentOnFilledMDArrayRankTwoHasFiveTenSix()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus  As Boolean
            myExpectedStatus = True
            
            Dim myExpectedFirstIndex As Long
            myExpectedFirstIndex = 5
            
            Dim myExpectedLastIndex As Long
            myExpectedLastIndex = 10
            
            Dim myExpectedCount As Long
            myExpectedCount = 6
            
            Dim myArray(5 To 10, 5 To 10, 5 To 10) As Long
            'Dim myResult As Boolean
            Dim myResult As Result
            
            Dim myResultState As Boolean
            
            
            'Act:
            myResultState = Arrays.TryExtent(myArray, myResult, 2)
            
            'Assert:
            Assert.Strict.AreEqual myExpectedStatus, myResultState, "Status"
            Assert.Strict.AreEqual myExpectedFirstIndex, myResult.Item(IsFirstIndex), "FirstIndex"
            Assert.Strict.AreEqual myExpectedLastIndex, myResult.Item(IsLastIndex), "LastIndex"
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub
    

    '@TestMethod("TryRotate")
        Public Sub Test26_TransposeArray()
            On Error GoTo TestFail
            
            'Arrange:
            
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            Dim myexpectedarray As Variant
            myexpectedarray = MakeColRowArray(5, 4)
            
            Dim mySource As Variant
            mySource = MakeRowColArray(4, 5)
            
        
            Dim myResult As Variant
            
            
            'Act:
            myResult = Arrays.Transpose(mySource)
            
            'Assert:
            
            Assert.Strict.SequenceEquals myexpectedarray, myResult, "Value"
            
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
            
        End Sub

    '@TestMethod("TryToLystOfLyst")
        Public Sub Test27_ArrayToLystOfLystsByRow()
            On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            Dim myExpectedLyst As Lyst
            Set myExpectedLyst = Lyst.Deb
            
            ' This is an example of the idiosyncrasy introduced by ParseVariantUsingSingleItemSpecialCase
            ' Which is that if we wish to add a single iterable to a Lyst as a single item
            ' the single iterable must be encapsulated in an array.
            
            With myExpectedLyst
            
                .Add Lyst.Deb.Add(1&, 2&, 3&, 4&)
                .Add Lyst.Deb.Add(5&, 6&, 7&, 8&)
                .Add Lyst.Deb.Add(9&, 10&, 11&, 12&)
                .Add Lyst.Deb.Add(13&, 14&, 15&, 16&)
                .Add Lyst.Deb.Add(17&, 18&, 19&, 20&)
                
            End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, RankIsRowFirstItemActionIsNoAction)
            
            'Assert:
            
            Dim myIndex As Long
            For myIndex = 0 To 4
            
                Assert.Strict.SequenceEquals myExpectedLyst.Item(myIndex).ToArray, myResult.Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub

    '@TestMethod("TryToLystOfLyst")
        Public Sub Test28_ArrayToLystOfLystsByCol()
            'On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            Dim myExpectedLyst As Lyst
            Set myExpectedLyst = Lyst.Deb
            
            With myExpectedLyst
                
                .Add Lyst.Deb.Add(1&, 5&, 9&, 13&, 17&)
                .Add Lyst.Deb.Add(2&, 6&, 10&, 14&, 18&)
                .Add Lyst.Deb.Add(3&, 7&, 11&, 15&, 19&)
                .Add Lyst.Deb.Add(4&, 8&, 12&, 16&, 20&)
                
            End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, TableToLystAction.RankIsColumnFirstItemActionIsNoAction)
            
            'Assert:
        
            Dim myIndex As Long
            For myIndex = 0 To 3
                Assert.Strict.SequenceEquals myExpectedLyst.Item(myIndex).ToArray, myResult.Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub

    '@TestMethod("TryToLystOfLyst")
        Public Sub Test29_ArrayToLystOfLystsByRowFirstItemActionIsSplitFirstRow()
            'On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            Dim myExpectedLyst As Lyst
            Set myExpectedLyst = Lyst.Deb
            
            With myExpectedLyst
            
                Dim myFirstValues As Lyst
                Set myFirstValues = Lyst.Deb.AddRange(Array(1&, 5&, 9&, 13&, 17&))
                
                .Add myFirstValues
                
                Dim myRankValues As Lyst
                Set myRankValues = Lyst.Deb
            
                With myRankValues
                
                    .Add Lyst.Deb.Add(2&, 3&, 4&)
                    .Add Lyst.Deb.Add(6&, 7&, 8&)
                    .Add Lyst.Deb.Add(10&, 11&, 12&)
                    .Add Lyst.Deb.Add(14&, 15&, 16&)
                    .Add Lyst.Deb.Add(18&, 19&, 20&)
                
                End With
            
                .Add myRankValues
                
            End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, RankIsRowFirstItemActionIsSplit)
            
            'Assert:
            Assert.Strict.SequenceEquals myFirstValues.ToArray, myResult.First.ToArray, CurrentProcedureName
        
            Dim myIndex As Long
            For myIndex = 0 To 4
                ' Dim myE As
                ' myE = myRankValues.Item(myIndex).toarray
                Assert.Strict.SequenceEquals myExpectedLyst.Item(1).Item(myIndex).ToArray, myResult.Item(1).Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub

    '@TestMethod("TryToLystOfLyst")
        Public Sub Test30_ArrayToLystOfLystsByColFirstItemActionIsSplitFirstItem()
            'On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            Dim myExpectedLyst As Lyst
            Set myExpectedLyst = Lyst.Deb
            
            With myExpectedLyst
            
                Dim myFirstValues As Lyst
                Set myFirstValues = Lyst.Deb.Add(1&, 2&, 3&, 4&)
                
                .Add myFirstValues
                
                Dim myRankValues As Lyst
                Set myRankValues = Lyst.Deb
            
                With myRankValues
                
                    .Add Lyst.Deb.Add(5&, 9&, 13&, 17&)
                    .Add Lyst.Deb.Add(6&, 10&, 14&, 18&)
                    .Add Lyst.Deb.Add(7&, 11&, 15&, 19&)
                    .Add Lyst.Deb.Add(8&, 12&, 16&, 20&)
                
                End With
            
                .Add myRankValues
        
            
            End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, RankIsColumnFirstItemActionIsSplit)
            
            'Assert:
            Dim myexpectedarray As Variant
            myexpectedarray = myFirstValues.ToArray
            
            Dim myResultarray As Variant
            myResultarray = myResult.First.ToArray
            
            Assert.Strict.SequenceEquals myFirstValues.ToArray, myResult.First.ToArray, CurrentProcedureName
            Dim myIndex As Long
            For myIndex = 0 To 3
                Assert.Strict.SequenceEquals myRankValues.Item(myIndex).ToArray, myResult.Item(1).Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub


    '@TestMethod("TryToLystOfLyst")
        Public Sub Test31_ArrayToLystOfLystsByRowFirstItemActionIsCopyFirstItem()
            'On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            ' Dim myExpectedLyst As Lyst
            ' Set myExpectedLyst = Lyst.Deb
            
            'With myExpectedLyst
            
                Dim myFirstValues As Variant
                myFirstValues = Array(1&, 5&, 9&, 13&, 17&)
                
            ' .Add myFirstValues
                
                Dim myRankValues As Lyst
                Set myRankValues = Lyst.Deb
            
                With myRankValues
                
                    .Add Lyst.Deb.Add(1&, 2&, 3&, 4&)
                    .Add Lyst.Deb.Add(5&, 6&, 7&, 8&)
                    .Add Lyst.Deb.Add(9&, 10&, 11&, 12&)
                    .Add Lyst.Deb.Add(13&, 14&, 15&, 16&)
                    .Add Lyst.Deb.Add(17&, 18&, 19&, 20&)
                
                End With
            
                '.Add myRankValues
                
        ' End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, RankIsRowFirstItemActionIsCopy)
            
            'Assert:
            Assert.Strict.SequenceEquals myFirstValues, myResult.First.ToArray, CurrentProcedureName
            Dim myIndex As Long
            For myIndex = 0 To 4
                Assert.Strict.SequenceEquals myRankValues.Item(myIndex).ToArray, myResult.Item(1).Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub


    '@TestMethod("TryToLystOfLyst")
        Public Sub Test32_ArrayToLystOfLystsByColFirstActionItemIsSPlitFirstItem()
            'On Error GoTo TestFail
            
            'Arrange:
            Dim myExpectedStatus As Boolean
            myExpectedStatus = True
            
            ' Dim myExpectedLyst As Lyst
            ' Set myExpectedLyst = Lyst.Deb
            
        '  With myExpectedLyst
            
                Dim myFirstValues As Variant
                myFirstValues = Array(1&, 2&, 3&, 4&)
                
            '    .Add myFirstValues
                
                Dim myRankValues As Lyst
                Set myRankValues = Lyst.Deb
            
                With myRankValues
                
                    .Add Lyst.Deb.Add(5&, 9&, 13&, 17&)
                    .Add Lyst.Deb.Add(6&, 10&, 14&, 18&)
                    .Add Lyst.Deb.Add(7&, 11&, 15&, 19&)
                    .Add Lyst.Deb.Add(8&, 12&, 16&, 20&)
                
                
                End With
            
            '   .Add myRankValues
        
            
        '  End With
            
            Dim mySource As Variant
            mySource = MakeRowColArray(5, 4)
            
            Dim myResult As Lyst
            
            'Act:
            Set myResult = Arrays.ToLystOfRanksAsLyst(mySource, RankIsColumnFirstItemActionIsSplit)
            
            'Assert:
            Assert.Strict.SequenceEquals myFirstValues, myResult.First.ToArray, CurrentProcedureName
            Dim myIndex As Long
            For myIndex = 0 To 3
                Assert.Strict.SequenceEquals myRankValues.Item(myIndex).ToArray, myResult.Item(1).Item(myIndex).ToArray, CurrentProcedureName
            Next
            
    TestExit:
            Exit Sub
            
    TestFail:
            Debug.Print "Test  raised an error: #" & Err.Number & " - " & Err.Description
            Resume TestExit
        End Sub
    End Module