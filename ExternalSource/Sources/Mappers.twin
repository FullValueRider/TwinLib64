Class mpInc

    Option Explicit
    '@PredeclaredId
    '@Exposed
    
    Implements IMapper
    
    Private Type State
        
        Increment                       As Variant
        
        
    End Type
    
    Private s                           As State

    Public Sub New()
    End Sub
    
    Public Function Deb(Optional ByVal ipIncrement As Variant = 1) As mpInc
        
        With New mpInc
        
            Set Deb = .ReadyToUseInstance(ipIncrement)
            
        End With
        
    End Function
    
    Friend Function ReadyToUseInstance(ByVal ipIncrement As Variant) As mpInc
        
        s.Increment = ipIncrement
        Set ReadyToUseInstance = Me
        
    End Function

    '@Description("Adds the value in ipArgsArray(0) to each item in the Lyst.  If the host item is not a number the string NAN is returned")
    Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
        Set IMapper_ExecMapper = ExecMapper(ipHostItem)
    End Function

    Public Function ExecMapper(ByVal ipHostItem As Variant) As Variant
        
        If Types.Group.IsNotNumber(ipHostItem) Then
            
            ExecMapper = ipHostItem
            
            
        Else
            
            ExecMapper = ipHostItem + s.Increment
            
            
        End If
       
        
    End Function

End Class


Class mpDec

    Option Explicit
    '@PredeclaredId
    '@Exposed
    
    Implements IMapper
    
    Private Type State
        
        Decrement                       As Variant
        
        
    End Type
    
    Private s                           As State

    Public Sub New()
    End Sub
    
    Public Function Deb(Optional ByVal ipDecrement As Variant = 1) As mpDec
        
        With New mpDec
        
            Set Deb = .ReadyToUseInstance(ipDecrement)
            
        End With
        
    End Function
    
    Friend Function ReadyToUseInstance(ByVal ipDecrement As Variant) As mpInc
        
        s.Decrement = ipDecrement
        Set ReadyToUseInstance = Me
        
    End Function

    '@Description("Adds the value in ipArgsArray(0) to each item in the Lyst.  If the host item is not a number the string NAN is returned")
    Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
        Set IMapper_ExecMapper = ExecMapper(ipHostItem)
    End Function

    Public Function ExecMapper(ByVal ipHostItem As Variant) As Variant
        
        If Types.Group.IsNotNumber(ipHostItem) Then
            
            ExecMapper = ipHostItem
            
            
        Else
            
            ExecMapper = ipHostItem + s.Decrement
            
            
        End If
       
        
    End Function

End Class


Class mpToLong

    '@PredeclaredId
    '@Exposed
    Option Explicit
    
    Implements IMapper
    
    'TwinBasic requirement
    Public Sub New()
    End Sub
    
    Public Function Deb() As mpToLong
        
        With New mpToLong
        
            Set Deb = .ReadyToUseInstance
            
        End With
        
    End Function
    
    
    Friend Function ReadyToUseInstance() As mpToLong
        
        Set ReadyToUseInstance = Me
        
    End Function
    
    
    Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
        IMapper_ExecMapper = ExecMapper(ipHostItem)
    End Function
    
    
    '@Description("Converts tthe items in the Lyst to Long Integers.  If the input item cannot be converted the string "NaN" is returned")
    Public Function ExecMapper(ByVal ipHostItem As Variant) As Variant
        
        On Error Resume Next
        Dim myResult As Long = CLng(ipHostItem)
        Dim myErrorNo As Long = Err.Number
        On Error GoTo 0
        
        ExecMapper = IIf(myErrorNo = 0, myResult, Sys.NotANumber)
        
    End Function

End Class

Class mpDedup

	'@Exposed
'@PredeclaredId
''@IgnoreModule
Option Explicit

Private Type State

    Args                    As variant
    
End Type

Private s                   As State

Implements IMapper

Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
    IMapper_ExecMapper = ExecMap(ipHostItem)
End Function

Public Sub New()
    s.Args = Array(" ")
End Sub

Public Function ExecMap(ByVal ipHostItem As Variant) As Variant
    
    ExecMap = ipHostItem
    If VBA.VarType(ipHostItem) <> vbString Then Exit Function
    
    Dim myItem As Variant
    For Each myItem In s.Args
        
       Strs.Dedup(ipHostItem, myItem)
       
    Next
   
    ExecMap = ipHostItem
    
End Function


Public Function Deb(ParamArray ipArgs() As Variant) As mpDedup

        With New mpDedup
        
            Set Deb = .ReadyToUseInstance(ipArgs)
        
        End With
        

End Function


Public Function Deb(Optional ByVal ipString As String = " ") As mpDedup
    
    With New mpDedup
    
        If VBA.Len(ipString) > 0 Then
            
            Set Deb = .ReadyToUseInstance(Strs.ToCharLyst(ipString).ToArray)
        
            
        End If
    
    End With
    
End Function

Friend Function ReadyToUseInstance(ByRef ipargs As Variant) As mpDedup
    
    s.Args = ipargs
    Set ReadyToUseInstance = Me
    
    
End Function

End Class

Class mpSplit

    '@Exposed
    '@PredeclaredId
    
    Option Explicit
    
    Private Type State
    
        Separator                       As String
        Count                           As Long
        Compare                         As VbCompareMethod
        
    End Type
    
    Private s                           As State
    
    Implements IMapper
    
    Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
        IMapper_ExecMapper = ExecMapper(ipHostItem)
    End Function
    
    Public Sub New()
        ' Allows mpSPlit to be used without calling .Deb
        s.Separator = " "
        s.Count = -1
        s.Compare = vbBinaryCompare
    End Sub
    
    Public Function ExecMapper(ByVal ipHostItem As Variant) As Variant
        
        If VBA.VarType(ipHostItem) <> vbString Then
            
            ExecMapper = ipHostItem
            Exit Function
            
            
        End If
        
        ExecMapper = VBA.Split(ipHostItem, s.Separator, s.Count, s.Compare)
        
    End Function
    
    
    Public Function Deb(Optional ByVal ipSeparator As String = " ", Optional ByVal ipCount As Long = -1, Optional ByVal ipCompare As VbCompareMethod = vbBinaryCompare) As mpSplit
    
            With New mpSplit
            
                Set Deb = .ReadyToUseInstance(ipSeparator, ipCount, ipCompare)
            
            End With
            
    
    End Function
    
    Friend Function ReadyToUseInstance(ByVal ipSeparator As String, ByVal ipCount As Long, ByVal ipCompare As VbCompareMethod) As mpSplit
        
        s.Separator = ipSeparator
        s.Count = ipCount
        s.Compare = ipCompare
        Set ReadyToUseInstance = Me
        
    End Function
    
End Class

Class mpToLower

	'@Exposed
    '@PredeclaredId
    
    Option Explicit
    
    Implements IMapper
    
    Private Function IMapper_ExecMapper(ByVal ipHostItem As Variant) As Variant
        IMapper_ExecMapper = ExecMap(ipHostItem)
    End Function
    
    Public Sub New()
    End Sub
    
    Public Function ExecMap(ByVal ipHostItem As Variant) As Variant
        
        If VBA.VarType(ipHostItem) <> vbString Then
            
            ExecMap = ipHostItem
         
        Else
            
            ExecMap = VBA.LCase(ipHostItem)
            
        End If
        
    End Function
    
    
    Public Function Deb() As mpToLower
    
            With New mpToLower
            
                Set Deb = .ReadyToUseInstance
            
            End With
            
    
    End Function
    
    Friend Function ReadyToUseInstance() As mpToLower
        
        Set ReadyToUseInstance = Me
        
    End Function

End Class