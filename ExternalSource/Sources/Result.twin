Class Result
'     VERSION 1.0 CLASS
' BEGIN
'   MultiUse = -1  'True
' END
' Attribute VB_Name = "Result"
' Attribute VB_GlobalNameSpace = False
' Attribute VB_Creatable = False
' Attribute VB_PredeclaredId = True
' Attribute VB_Exposed = True
    Option Explicit
    '@PredeclaredId
    '@Exposed
    '@Folder("VBALib")


    Private Type State
        
        Status                              As Boolean
        MsgId                               As enummessages.Id
        ResultItems                         As Lyst
        
    End Type

    Private s                               As State


    Friend Function Deb() As Result
        
        With New Result
        
            Set Deb = .ReadyToUseInstance
            
        
        End With
        
        
    End Function

    '@Description("Returns a Result object in its full NotOkey state")
    Friend Function ReadyToUseInstance() As Result
        
        ' This method sets up Result in the NotOkay state with items being 5 empty values
        ' Methods requiring multivalue results should use an
        ' appropriate enumeration (see ResultFieldsEnums) to access the result fields
        s.Status = Sys.NotOkay
        s.MsgId = enums.Message.AsEnum(NotOkay)
        Set s.ResultItems = Lyst.Deb.AddKnownItemsAsItems(Empty, Empty, Empty, Empty, Empty)
        Set ReadyToUseInstance = Me
        
    End Function


    '@DefaultMember
    Public Property Get Status() As Boolean
    Attribute Status.VB_UserMemId = 0
        Status = s.Status
    End Property


    Public Property Let Status(ByVal ipStatus As Boolean)
        
        s.Status = ipStatus
        s.MsgId = IIf(s.Status, enums.Message.AsEnum(Okay), enums.Message.AsEnum(NotOkay))
            
    End Property


    '@Description("Returns a message of any issue causing a deviation from the happy path.  Messages can occur even if the operation was successful.")
    Public Property Get MessageEnum() As enumMessages.Id
        MessageEnum = s.MsgId
    End Property


    Public Property Let MessageEnum(ByVal ipEnumMember As enumMessages.Id)
        s.MsgId = ipEnumMember
    End Property


    Public Property Get Item(ByVal ipResultFieldsEnum As Long) As Variant
        
        If VBA.IsObject(s.ResultItems.Item(ipResultFieldsEnum)) Then
            
            Set Item = s.ResultItems.Item(ipResultFieldsEnum)
            
            
        Else
            
        Item = s.ResultItems.Item(ipResultFieldsEnum)
            
            
        End If

    End Property


    Public Property Let Item(ByVal ipResultFieldsEnum As Long, ByVal ipItem As Variant)
        
        If VBA.IsObject(ipItem) Then
            
            Set s.ResultItems.Item(ipResultFieldsEnum) = ipItem
            
        
        Else
            
            s.ResultItems.Item(ipResultFieldsEnum) = ipItem
            
            
        End If
        
    End Property


    '@Description("Adds an Item to the Items collection of a Result object")
    Public Sub Add(ByVal ipItem As Variant)
        s.ResultItems.Add ipItem
    End Sub


    '@Description("Clearer intent compared to 'Not Result.Status'")
    Public Function NotOkay() As Boolean
        NotOkay = Not s.Status
    End Function


    '@Description("Clearer intent compared to 'Result.Status')
    Public Function Okay() As Boolean
        Okay = s.Status
    End Function


    '@Description("Returns a Lyst of the result items collection")
    Public Property Get Items() As Lyst
        Set Items = s.ResultItems
    End Property

    Public Property Set Items(ByVal ipItems As Lyst)
        Set s.ResultItems = ipItems
    End Property


    '@Enumerator
    Public Function NewEnum() As IUnknown
    Attribute NewEnum.VB_UserMemId = -4

        Dim enumerator As IUnknown
        Set enumerator = s.ResultItems.GetEnumerator  '  (0, s.Host.Count)
        Set NewEnum = enumerator

    End Function


    '@DEscription("Sets the status to 'True' and MessageEnum to Okay only if is NotOkay")
    Public Sub SetOkay(ParamArray ipArgs() As Variant)
        
        ' Preserve any message other than Not Okay
        If s.MsgId = Id.NotOkay Then s.MsgId = Id.Okay
        s.Status = Sys.Okay
        
        If Arrays.IsEmptyForwardedParamArray(ipArgs) Then Exit Sub
            
        Set s.ResultItems = Lyst.Deb.AddKnownIterableAsItems(ipArgs)
    
    End Sub


    '@Description("Sets Status and Messageenum to NotOkay")
    Public Sub SetNotOkay(ParamArray ipItems() As Variant)
        
        's.MsgId = Id.NotOkay
        s.Status = Sys.NotOkay
        
        If Arrays.IsEmptyForwardedParamArray(ipItems) Then Exit Sub
            
        Set s.ResultItems = Lyst.Deb.AddKnownIterableAsItems(ipItems)
        
    End Sub


    ' '@Description("Sets the Result to the 'NotOkay' or 'Failed' Result.Deb state")
    ' Public Sub SetToFullNotOkay()
    '     ReadyToUseInstance
    ' End Sub
    
End class