VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Result"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit
'@PredeclaredId
'@Exposed
'@Folder("VBALib")
'*********************************************************************************
' Do not use the Lyst object for any properties or parameters of the Result class
' Lyst uses the Result class as a member so you get into a circular definitiona issue
' which is only evident at runtime and causes a failure without an error message
'*********************************************************************************
' The function of the result class is to avoid having exceptions generated by the TwinLib64
' library.  Instead, provided I can avoid unknown exceptions, the library
' has a global result object which can be queried after any call into the library
' The Library will report Okay if it can return a value as specified by the function call
' It returns NotOkay if it cannot compute a value to return
' In many cases an OK value can be returned after making an adjustment to the input parameters
' inwhich case the MsgEnum field should be checked for what kinf of intervention was made.
' It should be stressed that the MsgEnum field is really intended to facilitate debugging
' code that uses the library and the MsgEnum field is not sufficiently reliable to use in
' production code.

Public Enum ResultOkayInput
    
    riOneOrMoreItems
    riIterable
    
End Enum


Private Type Properties
        
    Status As Boolean
    MsgId As Msg
    ResultItems As ArrayList
    Text As String
       
End Type

Private p                               As Properties

Private Sub Class_Initialize()
        
    p.Status = enums.Con.Value(Preset.ResultStatusOkay)
    p.MsgId = Msg.okay
    Set p.ResultItems = New ArrayList
        
    
End Sub


Public Function Deb() As Result
        
    With New Result
        
        Set Deb = .ReadyToUseInstance
            
        
    End With
        
        
End Function

'@Description("Returns a Result object in its full NotOkey state")
Friend Function ReadyToUseInstance() As Result
Attribute ReadyToUseInstance.VB_Description = "Returns a Result object in its full NotOkey state"
        
    Set p.ResultItems = New ArrayList
        
    Set ReadyToUseInstance = Me
        
End Function

Public Property Get AName() As String
    AName = "Result"
End Property


'@DefaultMember
Public Property Get Status() As Boolean
Attribute Status.VB_UserMemId = 0
    Status = p.Status
End Property

Friend Property Let Status(ByVal ipStatus As Boolean)
        
    p.Status = ipStatus
            
End Property

'@Description("Returns a message of any issue causing a deviation from the happy path.  Messages can occur even if the operation was successful.")
Public Property Get MsgEnum() As Msg
Attribute MsgEnum.VB_Description = "Returns a message of any issue causing a deviation from the happy path.  Messages can occur even if the operation was successful."
    MsgEnum = p.MsgId
End Property

Public Property Let MsgEnum(ByVal ipEnumMember As Msg)
    p.MsgId = ipEnumMember
End Property

Public Property Get Item(ByVal ipResultFieldsEnum As Long) As Variant
        
    If VBA.IsObject(p.ResultItems.Item(ipResultFieldsEnum)) Then
            
        Set Item = p.ResultItems.Item(ipResultFieldsEnum)
            
            
    Else
            
        Item = p.ResultItems.Item(ipResultFieldsEnum)
            
            
    End If

End Property

Public Property Let Item(ByVal ipResultFieldsEnum As Long, ByVal ipItem As Variant)
        
    If VBA.IsObject(ipItem) Then
            
        Set p.ResultItems.Item(ipResultFieldsEnum) = ipItem
            
        
    Else
            
        p.ResultItems.Item(ipResultFieldsEnum) = ipItem
            
            
    End If
        
End Property

'@Description("Adds an Item to the Items collection of a Result object")
Public Sub Add(ByVal ipItem As Variant)
Attribute Add.VB_Description = "Adds an Item to the Items collection of a Result object"
    p.ResultItems.Add ipItem
End Sub

Public Function Count() As Variant
  If p.ResultItems.Count = 0 Then
    
    Count = Empty
    
  Else
    
    Count = p.ResultItems.Count
    
    
  End If
  
End Function

Public Function Clone() As Result
    
    Dim myResult As Result
    Set myResult = Result.Deb
    myResult.Status = p.Status
    myResult.MsgEnum = p.MsgId
    Set myResult.Items = p.ResultItems.Clone
    myResult.SetText p.Text
    
    Set Clone = myResult
    
End Function

'@Description("Sugar for Count = 0")
Public Function HasItems() As Boolean
Attribute HasItems.VB_Description = "Sugar for Count = 0"
  HasItems = p.ResultItems.Count = 0
End Function


'@Description("Sugar for Count > 0")
Public Function HasNoItems() As Boolean
Attribute HasNoItems.VB_Description = "Sugar for Count > 0"
  HasNoItems = Not HasItems
End Function

'@Description("returns true if the globals.res object returns Okay=True and MsgId=resultstatusOkay")
Public Function AllOkay() As Boolean
Attribute AllOkay.VB_Description = "returns true if the globals.res object returns Okay=True and MsgId=resultstatusOkay"
    AllOkay = Globals.Res.IsOkay And (Globals.Res.MsgEnum = Msg.okay)
End Function

'@Description("Sugarfor 'Result.Status')
Public Function IsOkay() As Boolean
    IsOkay = p.Status
End Function


'@Description("Sugar for Not Result.Status")
Public Function IsNotOkay() As Boolean
Attribute IsNotOkay.VB_Description = "Sugar for Not Result.Status"
    IsNotOkay = Not p.Status
End Function


'@Description("Returns a Lyst of the result items collection")
Public Property Get Items() As ArrayList
Attribute Items.VB_Description = "Returns a Lyst of the result items collection"
    
    Set Items = p.ResultItems.Clone
End Property

Public Property Set Items(ByVal ipitems As ArrayList)
    Set p.ResultItems = ipitems
End Property


'@Enumerator
Public Function NewEnum() As IUnknown
Attribute NewEnum.VB_UserMemId = -4

    Dim enumerator As IUnknown
    Set enumerator = p.ResultItems.GetEnumerator '  (0, s.Host.Count)
    Set NewEnum = enumerator

End Function


'@Description("Sets the values of p.ResultItems ")
Public Function SetItems(ParamArray ipResultItems() As Variant) As Result
Attribute SetItems.VB_Description = "Sets the values of p.ResultItems "

    p.ResultItems.Clear
    Set SetItems = Me
    
    If BailOut.When(Arrays.IsNotValid(ipResultItems), Msg.UnexpectedEmpty) Then Exit Function
    
    Dim myItem As Variant
    For Each myItem In ipResultItems
   
        p.ResultItems.Add myItem
   
    Next
 
    Set SetItems = Me
            
End Function

'@Description("Sets Status and Messageenum")
Public Function SetOkay(Optional ByVal ipMessageEnum As Msg = Msg.okay) As Result  'eMessage.Msg = Msg.NotOkay
Attribute SetOkay.VB_Description = "Sets Status and Messageenum"
        
    If p.MsgId = Msg.NotOkay Or p.MsgId = Msg.okay Then p.MsgId = ipMessageEnum
    
    p.Status = enums.Con.Value(Preset.ResultStatusOkay)
    Set SetOkay = Me
    
End Function

'@Description("Sets Status and Messageenum")
Public Function SetNotOkay(Optional ByVal ipMessageEnum As Msg = Msg.NotOkay) As Result  'eMessage.Msg = Msg.NotOkay
Attribute SetNotOkay.VB_Description = "Sets Status and Messageenum"
        
If p.MsgId = Msg.NotOkay Or p.MsgId = Msg.okay Then p.MsgId = ipMessageEnum
    
    p.Status = enums.Con.Value(Preset.ResultStatusNotOkay)
    Set SetNotOkay = Me
    
End Function

'@Description("Sets the Result to the 'NotOkay' or 'Failed' Result.Deb state")
Public Function Init(ByVal ipMsg As Msg) As Result
Attribute Init.VB_Description = "Sets the Result to the 'NotOkay' or 'Failed' Result.Deb state"
    
    Select Case ipMsg
        
        Case Msg.okay
        
            p.MsgId = Msg.okay
            p.Status = enums.Con.Value(Preset.ResultStatusOkay)
        
        Case Msg.NotOkay
        
            p.MsgId = Msg.NotOkay
            p.Status = enums.Con.Value(Preset.ResultStatusNotOkay)
        
    End Select
   
    p.ResultItems.Clear
    Set Init = Me
    
End Function


Public Function GetText() As String
    GetText = p.Text
End Function

Public Function SetText(ByVal ipString As String) As Result
    p.Text = ipString
    Set SetText = Me
End Function


Public Function GetResultExtent() As ResultExtent
    Set GetResultExtent = ResultExtent.Deb(p.ResultItems.Clone)
End Function

Public Function GetResultStartRun() As ResultStartRun
     Set GetResultStartRun = ResultStartRun.Deb(p.ResultItems.Clone)
End Function

Public Function GetResultParsedVariant() As ResultParsedVariant
    Set GetResultParsedVariant = ResultParsedVariant.Deb(p.ResultItems.Clone)
End Function
